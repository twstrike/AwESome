package aes

import (
	. "gopkg.in/check.v1"
)

type StandardScheduleSuite struct{}

var _ = Suite(&StandardScheduleSuite{})

func (s *StandardScheduleSuite) TestNewSchedule128(c *C) {
	key := []word{0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c}
	expected := []word{
		0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c,
		0xa0fafe17, 0x88542cb1, 0x23a33939, 0x2a6c7605,
		0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f,
		0x3d80477d, 0x4716fe3e, 0x1e237e44, 0x6d7a883b,
		0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00,
		0xd4d1c6f8, 0x7c839d87, 0xcaf2b8bc, 0x11f915bc,
		0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd,
		0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f,
		0xead27321, 0xb58dbad2, 0x312bf560, 0x7f8d292f,
		0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e,
		0xd014f9a8, 0xc9ee2589, 0xe13f0cc8, 0xb6630ca6,
	}

	c.Check(keyExpand(key, nr128), DeepEquals, expected)
}

func (s *StandardScheduleSuite) TestNewSchedule192(c *C) {
	key := []word{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617}
	expected := []word{
		0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,
		0x10111213, 0x14151617, 0x5846f2f9, 0x5c43f4fe,
		0x544afef5, 0x5847f0fa, 0x4856e2e9, 0x5c43f4fe,
		0x40f949b3, 0x1cbabd4d, 0x48f043b8, 0x10b7b342,
		0x58e151ab, 0x04a2a555, 0x7effb541, 0x6245080c,
		0x2ab54bb4, 0x3a02f8f6, 0x62e3a95d, 0x66410c08,
		0xf5018572, 0x97448d7e, 0xbdf1c6ca, 0x87f33e3c,
		0xe5109761, 0x83519b69, 0x34157c9e, 0xa351f1e0,
		0x1ea0372a, 0x99530916, 0x7c439e77, 0xff12051e,
		0xdd7e0e88, 0x7e2fff68, 0x608fc842, 0xf9dcc154,
		0x859f5f23, 0x7a8d5a3d, 0xc0c02952, 0xbeefd63a,
		0xde601e78, 0x27bcdf2c, 0xa223800f, 0xd8aeda32,
		0xa4970a33, 0x1a78dc09, 0xc418c271, 0xe3a41d5d,
	}

	c.Check(keyExpand(key, nr192), DeepEquals, expected)
}

func (s *StandardScheduleSuite) TestNewSchedule256(c *C) {
	key := []word{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f}
	expected := []word{
		0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f,
		0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f,
		0xa573c29f, 0xa176c498, 0xa97fce93, 0xa572c09c,
		0x1651a8cd, 0x0244beda, 0x1a5da4c1, 0x0640bade,
		0xae87dff0, 0x0ff11b68, 0xa68ed5fb, 0x03fc1567,
		0x6de1f148, 0x6fa54f92, 0x75f8eb53, 0x73b8518d,
		0xc656827f, 0xc9a79917, 0x6f294cec, 0x6cd5598b,
		0x3de23a75, 0x524775e7, 0x27bf9eb4, 0x5407cf39,
		0x0bdc905f, 0xc27b0948, 0xad5245a4, 0xc1871c2f,
		0x45f5a660, 0x17b2d387, 0x300d4d33, 0x640a820a,
		0x7ccff71c, 0xbeb4fe54, 0x13e6bbf0, 0xd261a7df,
		0xf01afafe, 0xe7a82979, 0xd7a5644a, 0xb3afe640,
		0x2541fe71, 0x9bf50025, 0x8813bbd5, 0x5a721c0a,
		0x4e5a6699, 0xa9f24fe0, 0x7e572baa, 0xcdf8cdea,
		0x24fc79cc, 0xbf0979e9, 0x371ac23c, 0x6d68de36,
	}

	c.Check(keyExpand(key, nr256), DeepEquals, expected)
}

func (s *StandardScheduleSuite) TestScheduleFor128(c *C) {
	key := Key128{0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c}
	expected := keySchedule{
		roundSchedule{0x2b7e1516, 0x28aed2a6, 0xabf71588, 0x09cf4f3c},
		roundSchedule{0xa0fafe17, 0x88542cb1, 0x23a33939, 0x2a6c7605},
		roundSchedule{0xf2c295f2, 0x7a96b943, 0x5935807a, 0x7359f67f},
		roundSchedule{0x3d80477d, 0x4716fe3e, 0x1e237e44, 0x6d7a883b},
		roundSchedule{0xef44a541, 0xa8525b7f, 0xb671253b, 0xdb0bad00},
		roundSchedule{0xd4d1c6f8, 0x7c839d87, 0xcaf2b8bc, 0x11f915bc},
		roundSchedule{0x6d88a37a, 0x110b3efd, 0xdbf98641, 0xca0093fd},
		roundSchedule{0x4e54f70e, 0x5f5fc9f3, 0x84a64fb2, 0x4ea6dc4f},
		roundSchedule{0xead27321, 0xb58dbad2, 0x312bf560, 0x7f8d292f},
		roundSchedule{0xac7766f3, 0x19fadc21, 0x28d12941, 0x575c006e},
		roundSchedule{0xd014f9a8, 0xc9ee2589, 0xe13f0cc8, 0xb6630ca6},
	}

	c.Check(scheduleFor(key), DeepEquals, expected)
}

func (s *StandardScheduleSuite) TestScheduleFor192(c *C) {
	key := Key192{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617}
	expected := keySchedule{
		roundSchedule{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f},
		roundSchedule{0x10111213, 0x14151617, 0x5846f2f9, 0x5c43f4fe},
		roundSchedule{0x544afef5, 0x5847f0fa, 0x4856e2e9, 0x5c43f4fe},
		roundSchedule{0x40f949b3, 0x1cbabd4d, 0x48f043b8, 0x10b7b342},
		roundSchedule{0x58e151ab, 0x04a2a555, 0x7effb541, 0x6245080c},
		roundSchedule{0x2ab54bb4, 0x3a02f8f6, 0x62e3a95d, 0x66410c08},
		roundSchedule{0xf5018572, 0x97448d7e, 0xbdf1c6ca, 0x87f33e3c},
		roundSchedule{0xe5109761, 0x83519b69, 0x34157c9e, 0xa351f1e0},
		roundSchedule{0x1ea0372a, 0x99530916, 0x7c439e77, 0xff12051e},
		roundSchedule{0xdd7e0e88, 0x7e2fff68, 0x608fc842, 0xf9dcc154},
		roundSchedule{0x859f5f23, 0x7a8d5a3d, 0xc0c02952, 0xbeefd63a},
		roundSchedule{0xde601e78, 0x27bcdf2c, 0xa223800f, 0xd8aeda32},
		roundSchedule{0xa4970a33, 0x1a78dc09, 0xc418c271, 0xe3a41d5d},
	}

	c.Check(scheduleFor(key), DeepEquals, expected)
}

func (s *StandardScheduleSuite) TestScheduleFor256(c *C) {
	key := Key256{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f, 0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f}
	expected := keySchedule{
		roundSchedule{0x00010203, 0x04050607, 0x08090a0b, 0x0c0d0e0f},
		roundSchedule{0x10111213, 0x14151617, 0x18191a1b, 0x1c1d1e1f},
		roundSchedule{0xa573c29f, 0xa176c498, 0xa97fce93, 0xa572c09c},
		roundSchedule{0x1651a8cd, 0x0244beda, 0x1a5da4c1, 0x0640bade},
		roundSchedule{0xae87dff0, 0x0ff11b68, 0xa68ed5fb, 0x03fc1567},
		roundSchedule{0x6de1f148, 0x6fa54f92, 0x75f8eb53, 0x73b8518d},
		roundSchedule{0xc656827f, 0xc9a79917, 0x6f294cec, 0x6cd5598b},
		roundSchedule{0x3de23a75, 0x524775e7, 0x27bf9eb4, 0x5407cf39},
		roundSchedule{0x0bdc905f, 0xc27b0948, 0xad5245a4, 0xc1871c2f},
		roundSchedule{0x45f5a660, 0x17b2d387, 0x300d4d33, 0x640a820a},
		roundSchedule{0x7ccff71c, 0xbeb4fe54, 0x13e6bbf0, 0xd261a7df},
		roundSchedule{0xf01afafe, 0xe7a82979, 0xd7a5644a, 0xb3afe640},
		roundSchedule{0x2541fe71, 0x9bf50025, 0x8813bbd5, 0x5a721c0a},
		roundSchedule{0x4e5a6699, 0xa9f24fe0, 0x7e572baa, 0xcdf8cdea},
		roundSchedule{0x24fc79cc, 0xbf0979e9, 0x371ac23c, 0x6d68de36},
	}

	c.Check(scheduleFor(key), DeepEquals, expected)
}
func (s *StandardScheduleSuite) Test_rotWord(c *C) {
	c.Check(rotWord(0xABCDEF12), Equals, word(0xCDEF12AB))
}

func (s *StandardScheduleSuite) Test_subWord(c *C) {
	c.Check(subWord(0xABCDEF12), Equals, word(0x62BDDFC9))
}

func (s *StandardScheduleSuite) Test_rcon(c *C) {
	c.Check(rcon(1), Equals, word(0x01000000))
	c.Check(rcon(2), Equals, word(0x02000000))
	c.Check(rcon(3), Equals, word(0x04000000))
	c.Check(rcon(4), Equals, word(0x08000000))
	c.Check(rcon(9), Equals, word(0x1B000000))
	c.Check(rcon(254), Equals, word(0xCB000000))
	c.Check(rcon(255), Equals, word(0x8D000000))
}

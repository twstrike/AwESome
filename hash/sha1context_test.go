package hash

import . "gopkg.in/check.v1"

func (s *SHA1Suite) TestFi(c *C) {
	ii := 0
	bb := uint32(0xEFCDAB89)
	cc := uint32(0x98BADCFE)
	dd := uint32(0x10325476)
	c.Assert(fi(ii, bb, cc, dd), DeepEquals, uint32(0x98BADCFE))
	ii = 20
	bb = uint32(0xDC889E75)
	cc = uint32(0xB51448F0)
	dd = uint32(0x4EACBAB7)
	c.Assert(fi(ii, bb, cc, dd), DeepEquals, uint32(0x27306C32))
	ii = 40
	bb = uint32(0x44C07E77)
	cc = uint32(0x1A9B3ABB)
	dd = uint32(0x53656AE4)
	c.Assert(fi(ii, bb, cc, dd), DeepEquals, uint32(0x52C17AF7))
	ii = 60
	bb = uint32(0xDC889E75)
	cc = uint32(0xB51448F0)
	dd = uint32(0x4EACBAB7)
	c.Assert(fi(ii, bb, cc, dd), DeepEquals, uint32(0x27306C32))
}

func (s *SHA1Suite) TestUpdateByZero(c *C) {
	ctx := sha1Context{}
	ctx.init()
	c.Assert(ctx, DeepEquals,
		sha1Context{
			A: 0x0, B: 0x0, C: 0x0, D: 0x0, E: 0x0,
			H0: 0x67452301, H1: 0xefcdab89, H2: 0x98badcfe, H3: 0x10325476, H4: 0xc3d2e1f0,
			W:    [80]uint32{},
			temp: 0x0})
	ctx.update([sha1BlockSizeInBytes]byte{})
	c.Assert(ctx, DeepEquals,
		sha1Context{
			A: 0x2b6ee1e4, B: 0x668ae164, C: 0xd35ff050, D: 0xaed2eaf2, E: 0x462458a3, H0: 0x92b404e5, H1: 0x56588ced, H2: 0x6c1acd4e, H3: 0xbf053f68, H4: 0x9f73a93,
			W:    [80]uint32{},
			temp: 0x2b6ee1e4})
}

func (s *SHA1Suite) TestUpdate(c *C) {
	ctx := sha1Context{}
	ctx.init()
	c.Assert(ctx, DeepEquals,
		sha1Context{
			A: 0x0, B: 0x0, C: 0x0, D: 0x0, E: 0x0,
			H0: 0x67452301, H1: 0xefcdab89, H2: 0x98badcfe, H3: 0x10325476, H4: 0xc3d2e1f0,
			W:    [80]uint32{},
			temp: 0x0})
	ctx.update([sha1BlockSizeInBytes]byte{
		0x41, 0x20, 0x54, 0x65,
		0x73, 0x74, 0x80, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x30,
	})
	c.Assert(ctx, DeepEquals,
		sha1Context{
			A: 0x27c6e554, B: 0xa188885b, C: 0xf233c48, D: 0x7b062052, E: 0xcc4b0e53,
			H0: 0x8f0c0855, H1: 0x915633e4, H2: 0xa7de1946, H3: 0x8b3874c8, H4: 0x901df043,
			W: [80]uint32{
				0x41205465, 0x73748000, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x0,
				0x0, 0x0, 0x0, 0x30,
				0x8240a8ca, 0xe6e90000, 0x60, 0x4815195,
				0xcdd20001, 0xc0, 0x902a32a, 0x9ba40063,
				0x4815015, 0xdfd74655, 0x37480007, 0x300,
				0x240a8ca8, 0x6e9001ee, 0x168411c1, 0xb28f19f6,
				0xd0a3f2a3, 0x56760c02, 0x902a3320, 0xa84541ed,
				0x6d584703, 0xca3c64da, 0x66854627, 0x37483187,
				0x52ad8cd6, 0xde481ee1, 0x68411c11, 0x28f19fab,
				0x33d8917, 0xfcc4c1a6, 0x10a675dd, 0xa1195ac9,
				0xddc119e7, 0x61ba4da6, 0x685465f6, 0x2e9346f7,
				0xd2b58b2a, 0xd3c9e21a, 0x143bf3b6, 0x3559fd0b,
				0x69c8d674, 0x6707eb5, 0x6ce21bf6, 0x26dd9d1d,
				0x8ebc12ab, 0xc5ecc507, 0xff020523, 0xf68df19e,
				0x3362dec4, 0x6cb6e18f, 0x411c0968, 0xd1cbce69,
				0x49091770, 0xc4c1a6fc, 0xa675dd10, 0x195acaa1,
				0xe5136b75, 0xd4ddbe6f, 0x74319529, 0xafd3fa0d,
				0xd8d57d2f, 0x7220e99, 0x8b8df9f5, 0xb7694f3e,
			},
			temp: 0x27c6e554})
}

func (s *SHA1Suite) Testuint32ToSHA1Output(c *C) {
	input := [5]uint32{0x8f0c0855, 0x915633e4, 0xa7de1946, 0x8b3874c8, 0x901df043}
	output := uint32ToSHA1Output(input)
	result := [20]byte{
		0x8f, 0x0c, 0x08, 0x55,
		0x91, 0x56, 0x33, 0xe4,
		0xa7, 0xde, 0x19, 0x46,
		0x8b, 0x38, 0x74, 0xc8,
		0x90, 0x1d, 0xf0, 0x43,
	}
	c.Assert(output, DeepEquals, result)
}
